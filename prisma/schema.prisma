// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing generator and datasource blocks remain the same

// NextAuth required models
model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  id           String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id           String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id           String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id           String   @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// Modified User model with additional fields
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  image         String?   // Add this line

  
  // KYC related fields
  kycStatus           String?   // e.g., "PENDING", "APPROVED", "REJECTED"
  sumsubApplicantId   String?   @unique
  kycSubmittedAt      DateTime?
  kycApprovedAt       DateTime?
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  wallets       Wallet[]
  orders        Order[]
  bankAccounts  BankAccount[]
  twoFactorConfirmation TwoFactorConfirmation?
  isTwoFactorEnabled Boolean   @default(false)
}

model Wallet {
  id          String    @id @default(cuid())
  address     String    @unique    // e.g., "TKiSgkjUwe9...xMds1pCVOxJ"
  nickname    String?   // e.g., "Rajbinpers"
  type        String    // e.g., "First party"
  status      String    // e.g., "APPROVED"
  balance     Decimal   @default(0)
  currency    String    // e.g., "USDT", "BTC", "ETH"
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id            String    @id @default(cuid())
  type          String    // "BUY" or "SELL"
  asset         String    // e.g., "Tether"
  quantity      Decimal
  pricePerToken Decimal
  totalAmount   Decimal
  status        String    // e.g., "COMPLETED", "PENDING", "FAILED"
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  createdAt     DateTime  @default(now())
  currency      String    // e.g., "AED", "USD"
  referenceId   String    @unique
}

model BankAccount {
  id              String    @id @default(cuid())
  accountHolder   String
  bankName        String    // e.g., "Zand"
  accountNumber   String?
  iban            String?   @unique
  currency        String    // e.g., "AED", "USD"
  bankAddress     String?
  bankCountry     String
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Transaction {
  id            String    @id @default(cuid())
  type          String    // e.g., "Deposit", "Withdraw"
  amount        Decimal
  currency      String
  status        String    // e.g., "COMPLETED", "PENDING"
  referenceId   String    @unique
  transactionHash String? @unique
  destination   String?
  createdAt     DateTime  @default(now())
}

model Quote {
  id          String    @id @default(cuid())
  amount      Decimal
  currency    String
  quoteRate   Decimal
  type        String    // "BUY" or "SELL"
  status      String    // "ACTIVE", "EXPIRED", "USED"
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
}