generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication Models
model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// Core Business Models
model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String?   @unique
  emailVerified        DateTime?
  password             String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  image                String?
  kycStatus            String?
  sumsubApplicantId    String?   @unique
  kycSubmittedAt       DateTime?
  kycApprovedAt        DateTime?
  isTwoFactorEnabled   Boolean   @default(false)
  
  // Relations
  accounts             Account[]
  sessions             Session[]
  wallets              Wallet[]
  orders               Order[]
  bankAccounts         BankAccount[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Wallet {
  id          String     @id @default(cuid())
  address     String     @unique
  nickname    String?
  type        String
  status      String
  balance     Decimal    @default(0)
  currency    String
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  transactions Transaction[] @relation("WalletTransactions")
}

model BankAccount {
  id              String      @id @default(cuid())
  accountHolder   String
  bankName        String
  accountNumber   String?
  iban            String?     @unique
  currency        String
  bankAddress     String?
  bankCountry     String
  userId          String
  balance         Decimal     @default(0)
  user            User        @relation(fields: [userId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  transactions    Transaction[] @relation("BankTransactions")
}

model Transaction {
  id              String      @id @default(cuid())
  type            TransactionType
  amount          Decimal
  currency        String
  status          TransactionStatus
  referenceId     String      @unique
  transactionHash String?     @unique
  description     String?
  createdAt       DateTime    @default(now())
  
  // Relations
  walletId        String?
  wallet          Wallet?     @relation("WalletTransactions", fields: [walletId], references: [id])
  bankAccountId   String?
  bankAccount     BankAccount? @relation("BankTransactions", fields: [bankAccountId], references: [id])

  @@index([walletId])
  @@index([bankAccountId])
}

model Order {
  id            String    @id @default(cuid())
  type          String
  asset         String
  quantity      Decimal
  pricePerToken Decimal
  totalAmount   Decimal
  status        String
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  createdAt     DateTime  @default(now())
  currency      String
  referenceId   String    @unique
}

model Quote {
  id          String    @id @default(cuid())
  amount      Decimal
  currency    String
  quoteRate   Decimal
  type        String
  status      String
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
}

// Enums
enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}